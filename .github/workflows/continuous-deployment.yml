name: Continuous Deployment

on:
  push:
    branches: ['release']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CLIENT: client
  SERVER: server

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Libindy
        uses: ./.github/actions/setup-libindy

      - name: Setup NodeJS
        uses: ./.github/actions/setup-node
        with:
          node-version: 16

      - name: Start App
        run: |
          yarn
          NODE_ENV=test AGENT_WALLET_KEY=ba8e2462-f9ac-4da0-a9c6-99592a7dbc12 REACT_APP_HOST_BACKEND=http://localhost:5000 AGENT_PUBLIC_DID_SEED=testtesttesttesttesttesttesttest yarn dev &

      - name: Wait for credential defs to be created
        run: sleep 120s
        shell: bash

      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          record: true
          browser: chrome
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image-server:
    needs:
      - cypress-run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    defaults:
      run:
        working-directory: ${{ env.SERVER }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Libindy
        uses: ./.github/actions/setup-libindy

      - name: Setup NodeJS
        uses: ./.github/actions/setup-node
        with:
          node-version: 16

      - name: Install dependencies
        run: yarn install

      - run: yarn build

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.SERVER }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./server
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-image-client:
    needs:
      - cypress-run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    defaults:
      run:
        working-directory: ${{ env.CLIENT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Libindy
        uses: ./.github/actions/setup-libindy

      - name: Install dependencies
        run: yarn install

      - run: REACT_APP_INSIGHTS_PROJECT_ID=${{ secrets.REACT_APP_INSIGHTS_PROJECT_ID }} REACT_APP_HOST_BACKEND=${{ secrets.REACT_APP_HOST_BACKEND }} yarn build

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.CLIENT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./client
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image-client
      - build-and-push-image-server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Copy stack file to remote
        uses: garygrossgarten/github-action-scp@v0.7.3
        with:
          local: docker-compose.yml
          remote: animo-demo/docker-compose.yml
          host: dashboard.dev.animo.id
          username: root
          privateKey: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}

      - name: Deploy to Docker Swarm via SSH action
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: dashboard.dev.animo.id
          username: root
          key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          script: |
            docker stack deploy --compose-file animo-demo/docker-compose.yml demo --with-registry-auth
